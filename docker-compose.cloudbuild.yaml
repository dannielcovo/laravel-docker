version: "3"

services:

    #app faz a comunicacao ... nginx.config usa o app
    app:
        #da o build a partir do docker file
        build: .
        container_name: app
#         entrypoint: dockerize -template ./.docker/app/.env:.env -wait tcp://db:3306 -timeout 60s ./.docker/entrypoint.sh
#         environment:
#           - DB_HOST=db
#           - DB_DATABASE=laravel
#           - DB_USERNAME=root
#           - DB_PASSWORD=root

        volumes:
          - .:/var/www
        networks:
          - app-network
        depends_on:
          - db
          - redis

    nginx:
        build: .docker/nginx
        container_name: nginx
        entrypoint: dockerize -template /etc/nginx/conf.d/nginx.conf:/etc/nginx/conf.d/nginx.conf nginx -g "daemon off;"
        environment:
           - NGINX_HOST=app
           - NGINX_PORT=9000
        restart: always
        tty: true
        ports:
          - "8000:80"
        volumes:
          - .:/var/www
        networks:
          - app-network
        depends_on:
          - app


    db:
      image: mysql:5.7
      command: --innodb-use-native-aio=0
      container_name: db
      restart: always
      tty: true
      ports:
        - "3306:3306"
      volumes:
        #ir√° criar a  pasta dbdata dentro do meu .docker e armazenar os dados do mysql e vai compartilhar no volume do container
        - ./.docker/dbdata:/var/lib/mysql
        # quando a imagem  sobe vai criar o banco de dados com essas credenciais
      environment:
        - MYSQL_DATABASE=laravel
        - MYSQL_ROOT_PASSWORD=root
        - MYSQL_USER=rood

      networks:
        - app-network

    redis:
        image: redis:alpine
        expose:
          - 6379
        networks:
          - app-network

networks:
  app-network:
    driver: bridge
