FROM php:7.3.9-fpm-alpine3.10 as builder
RUN apk add --no-cache openssl bash mysql-client nodejs npm
RUN docker-php-ext-install pdo pdo_mysql

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

WORKDIR /var/www
RUN rm -rf /var/www/html
RUN ln -s public html

COPY . /var/www

RUN composer install \
                && php artisan key:generate \
                && php artisan cache:clear \
                && chmod -R 777 storage

RUN npm install

#criar uma imagem limpa jogando no container os npm, node, bash que esta na primeira imagem
FROM php:7.3.9-fpm-alpine3.10
RUN apk add --no-cache mysql-client
RUN docker-php-ext-install pdo pdo_mysql
WORKDIR /var/www
RUN rm -rf /var/www/html

COPY --from=builder /var/www .

EXPOSE 9000
#COMANDO que vai executar depois que o container subir
#ENTRYPOINT ["php-fpm"]